#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)

require 'konstant'

unless Konstant.env == "production"
  require "debugger"
end

cli = Konstant::Cli.new
cli.parse_options
command = cli.cli_arguments.first

[:INT, :TERM].each do |sig|
  trap sig do
    Konstant.shutdown_handlers.each do |sh|
      sh.call
    end
  end
end

command = "version" if cli.config[:version]

case command
  when "version"
    puts Konstant::VERSION
  when "run"
    Konstant.configure "./konstant.js"

    require "puma"
    require "rack/handler/puma"

    threads = []

    if cli.config[:web]
      threads << Thread.new do
        options = {
          :Host => cli.config[:host],
          :Port => cli.config[:port]
        }

        app = Konstant::Web
        static = Rack::Static.new(app,
          :urls => ["/assets"],
          :root => "#{Konstant.root}/public",
          :index => "index.html"
        )

        Rack::Handler::Puma.run static, options do |server|
          Konstant.shutdown_handlers << Proc.new do
            server.stop
          end
        end
      end
      sleep 2
      puts "Web server started"
    end

    if cli.config[:scheduler]
      threads << Thread.new do
        Konstant::Scheduler.new.run
      end
      puts "Build scheduler started"
    end

    threads.map{|t| t.join}
  when "config"
    Konstant.configure "./konstant.js"
    p Konstant.config
  when "init"
    system "cp -a #{Konstant.root}/data/templates/data_dir/* ."
  when "generate"
    item = cli.cli_arguments[1]

    case item
      when "project"
        project_id = cli.cli_arguments[2]
        Konstant.configure "./konstant.js"
        system "cp -a #{Konstant.root}/data/templates/project #{Konstant.config['data_dir']}/projects/#{project_id}"
      else
        puts "Generator doesn't exist: '#{item}'"
    end
  else
    raise "unknown command '#{command}'"
end